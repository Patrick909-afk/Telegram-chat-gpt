import asyncio
import json
import os
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from datetime import datetime

logging.basicConfig(level=logging.INFO)
TOKEN = '7597124882:AAGrU0WG_6LOQZr-UePPaQorugB1xmsAPOo'
ADMIN_ID = 1609956648

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

DATA_FILE = 'secret_data.json'

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r') as f:
                data = json.load(f)
            if not isinstance(data.get("secrets"), list):
                data["secrets"] = []
            if not isinstance(data.get("stats"), dict):
                data["stats"] = {"sent": 0, "opened": 0}
            if not isinstance(data.get("bonus"), dict):
                data["bonus"] = {}
            if not isinstance(data.get("paid"), dict):
                data["paid"] = {}
            return data
        except Exception:
            pass
    return {"secrets": [], "stats": {"sent": 0, "opened": 0}, "bonus": {}, "paid": {}}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –∏ –Ω–µ–º–Ω–æ–≥–æ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è üòâ\n–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å—ë!")

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ (@–±–æ—Ç username —Ç–µ–∫—Å—Ç)\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        "‚Ä¢ –†–∞–Ω–¥–æ–º dick / gay / pidor\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/list ‚Äì –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã\n"
        "/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/my ‚Äì –º–æ–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã\n"
        "/bonus ‚Äì –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n"
        "/buy ‚Äì –∫–∞–∫ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø\n"
        "/help ‚Äì —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

@dp.message_handler(commands=['buy'])
async def buy_cmd(message: types.Message):
    await message.answer("üí∞ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —á—É–∂–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤, –ø–∏—à–∏ –∞–¥–º–∏–Ω—É: @gde_patrick")

@dp.message_handler(commands=['bonus'])
async def bonus_cmd(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    today = datetime.now().strftime("%Y-%m-%d")
    if data["bonus"].get(user_id) == today:
        return await message.answer("‚úÖ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!")
    data["bonus"][user_id] = today
    data["paid"][user_id] = data["paid"].get(user_id, 0) + 1
    save_data(data)
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–ª—É—á–∏–ª 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä.\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!")

@dp.message_handler(commands=['my'])
async def my_cmd(message: types.Message):
    data = load_data()
    count = data["paid"].get(str(message.from_user.id), 0)
    await message.answer(f"üîë –£ —Ç–µ–±—è {count} –ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")

@dp.message_handler(commands=['add'])
async def add_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /add user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    user_id, amount = parts[1], parts[2]
    if not amount.isdigit():
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    data = load_data()
    data["paid"][user_id] = data["paid"].get(user_id, 0) + int(amount)
    save_data(data)
    await message.reply(f"‚úÖ –í—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {amount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")

@dp.message_handler(commands=['list'])
async def list_cmd(message: types.Message):
    data = load_data()
    my_username = (message.from_user.username or '').lower()
    my_id = message.from_user.id
    my_secrets = [
        s for s in data["secrets"]
        if not s["read"] and (
            (my_username and s["to"] == my_username) or s.get("to_id") == my_id
        )
    ]
    if not my_secrets:
        return await message.answer("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤.")
    text = "\n".join([f"üîë ID: {s['id']} | –û—Ç: @{s['from']}" for s in my_secrets])
    await message.answer(f"üìã –¢–≤–æ–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:\n{text}")

@dp.message_handler(commands=['stats'])
async def stats_cmd(message: types.Message):
    data = load_data()
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['stats']['sent']}\n‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {data['stats']['opened']}")

@dp.message_handler(commands=['del'])
async def del_cmd(message: types.Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /del ID")
    secret_id = parts[1]
    data = load_data()
    before = len(data["secrets"])
    my_username = (message.from_user.username or '').lower()
    my_id = message.from_user.id
    data["secrets"] = [
        s for s in data["secrets"]
        if not (s["id"] == secret_id and (
            (my_username and s["to"] == my_username) or s.get("to_id") == my_id
        ))
    ]
    after = len(data["secrets"])
    save_data(data)
    if before == after:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await message.answer(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {secret_id} —É–¥–∞–ª–µ–Ω–æ!")

@dp.inline_handler()
async def inline_secret(query: types.InlineQuery):
    text = query.query.strip()
    args = text.split(maxsplit=1)
    data = load_data()

    # dick
    if text.lower() == "dick":
        size = round(random.uniform(-0.55, 204.55), 2)
        desc = random.choice(["üî• –£ —Ç–µ–±—è –≤–∞–≥–∏–Ω–∞!", "üòÇ –î–∞ —É —Ç–µ–±—è –∫–∞–∫ —Å–ø–∏—á–∫–∞!", "üí™ –û–≥–æ, –Ω–µ–ø–ª–æ—Ö–æ!", "ü§£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π!", "ü§° –ß—Ç–æ —ç—Ç–æ?"])
        await query.answer([
            InlineQueryResultArticle(
                id='dick',
                title=f"üìèüçå {size} —Å–º",
                description=desc,
                input_message_content=InputTextMessageContent(f"üìèüçå –ú–æ–π —Ä–∞–∑–º–µ—Ä —á–ª–µ–Ω–∞: {size} —Å–º - {desc}"),
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üòé –£–∑–Ω–∞—Ç—å —Å–≤–æ–π!", switch_inline_query_current_chat="dick"))
            )
        ], cache_time=1)
        return

    # gay
    if text.lower() == "gay":
        percent = round(random.uniform(0, 100), 2)
        desc = random.choice(["üè≥Ô∏è‚Äçüåà –¢—ã –æ—á–µ–Ω—å –≥–µ–π!", "üòè –ï—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ", "üòÇ –ü–æ—á—Ç–∏ –Ω–µ—Ç!", "üî• –ú–∞–∫—Å–∏–º—É–º!", "ü§£ –õ–µ–≥–µ–Ω–¥–∞!"])
        await query.answer([
            InlineQueryResultArticle(
                id='gay',
                title=f"üåà {percent}%",
                description=desc,
                input_message_content=InputTextMessageContent(f"üåà –Ø –≥–µ–π –Ω–∞ {percent}% - {desc}"),
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üåà –£–∑–Ω–∞—Ç—å —Å–≤–æ–π!", switch_inline_query_current_chat="gay"))
            )
        ], cache_time=1)
        return

    # pidor
    if text.lower() == "pidor":
        percent = round(random.uniform(0, 100), 2)
        desc = random.choice(["üòÇ –ü–∏–¥–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π!", "üòè –ï—Å—Ç—å —á—É—Ç—å-—á—É—Ç—å", "ü§£ –ü–æ—á—Ç–∏ –Ω–µ –ø–∏–¥–æ—Ä!", "üî• –ù—É —Ç—ã –¥–∞—ë—à—å!", "ü§° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π!"])
        await query.answer([
            InlineQueryResultArticle(
                id='pidor',
                title=f"ü§° {percent}%",
                description=desc,
                input_message_content=InputTextMessageContent(f"ü§° –Ø –ø–∏–¥–æ—Ä –Ω–∞ {percent}% - {desc}"),
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("ü§° –£–∑–Ω–∞—Ç—å —Å–≤–æ–π!", switch_inline_query_current_chat="pidor"))
            )
        ], cache_time=1)
        return

    if len(args) < 2:
        return await query.answer([
            InlineQueryResultArticle(
                id='help',
                title='‚ùì –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç',
                description='–§–æ—Ä–º–∞—Ç: @username —Ç–µ–∫—Å—Ç_—Å–µ–∫—Ä–µ—Ç–∞',
                input_message_content=InputTextMessageContent(
                    "‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                    "‚Ä¢ dick / gay / pidor ‚Äì –ø—Ä–∏–∫–æ–ª—ã\n"
                    "‚Ä¢ @username —Ç–µ–∫—Å—Ç ‚Äì —Å–µ–∫—Ä–µ—Ç\n"
                    "‚Ä¢ /list, /stats, /my, /bonus, /buy, /help"
                )
            )
        ], cache_time=1)

    username, secret_text = args
    if not username.startswith('@'):
        username = '@' + username
    secret_id = str(len(data["secrets"]) + 1)
    data["secrets"].append({
        "id": secret_id,
        "to": username[1:].lower(),
        "to_id": None,
        "text": secret_text,
        "from": query.from_user.username or str(query.from_user.id),
        "read": False
    })
    data["stats"]["sent"] += 1
    save_data(data)
    await query.answer([
        InlineQueryResultArticle(
            id=secret_id,
            title=f"üîí –°–µ–∫—Ä–µ—Ç –¥–ª—è {username}",
            description=f"–û—Ç: @{query.from_user.username or query.from_user.id}",
            input_message_content=InputTextMessageContent(f"üëÄ –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {username}!"),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîì –ü—Ä–æ—á–∏—Ç–∞—Ç—å", callback_data=f"open_{secret_id}")
            )
        )
    ], cache_time=1)

@dp.callback_query_handler(lambda c: c.data.startswith("open_"))
async def open_secret(call: types.CallbackQuery):
    secret_id = call.data.split('_')[1]
    data = load_data()
    secret = next((s for s in data["secrets"] if s["id"] == secret_id), None)
    if not secret:
        return await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    user_id = str(call.from_user.id)
    my_username = (call.from_user.username or '').lower()
    paid = data["paid"].get(user_id, 0)
    user_ok = False
    if (my_username and my_username == secret["to"]) or (secret.get("to_id") and call.from_user.id == secret["to_id"]):
        user_ok = True
    elif paid > 0:
        data["paid"][user_id] -= 1
        user_ok = True
    if not secret.get("to_id"):
        secret["to_id"] = call.from_user.id
    if not user_ok:
        return await call.answer("üö´ –≠—Ç–æ –Ω–µ –¥–ª—è —Ç–µ–±—è! –•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø? –ü–∏—à–∏ @gde_patrick", show_alert=True)
    secret["read"] = True
    data["stats"]["opened"] += 1
    save_data(data)
    await call.answer(f"üì® –û—Ç @{secret['from']}:\n{secret['text']}", show_alert=True)

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling())
